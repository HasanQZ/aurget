#!/usr/bin/python

import requests
import os
import sys
import subprocess

BOLD = '\033[1m'
GREEN = '\033[92m'
RED = '\033[91m'
ENDC = '\033[0m'

home_folder = os.path.expanduser('~')
username = home_folder.split('/')[-1].strip('/')
current_file_path = __file__
current_file_directory = ''.join([i + '/' for i in current_file_path.split('/')[0:-1]])

normal_term = True
try:
    os.get_terminal_size()
except OSError:
    normal_term = False

cache_path = f'{home_folder}/.cache/aurinstall'

def pretty_print(text, indent=4, first_indent=4):
    try:
        termwidth = os.get_terminal_size().columns - indent
        words = [i for i in text.split(' ')]

        print(' ' * first_indent, end='')
        i = 0
        for index, word in enumerate(words):
            print(word, end=' ')
            i += len(word) + 1

            try:
                if i + (len(words[index + 1]) + 1) >= termwidth:
                    print('')
                    print(' ' * indent, end='')
                    i = 0

            except IndexError:
                pass

        print('')
    except:
        pass

def print_package_info(metadata):
    version = metadata['Version']
    name = metadata['Name']
    if normal_term:
        print(f'{BOLD}{RED}aur/{ENDC}{ENDC}' + f'{BOLD}{name}{ENDC} ' + f'{BOLD}{GREEN}{version}{ENDC}{ENDC}')
        pretty_print(metadata['Description'])
    elif not normal_term:
        print(f'aur/{name} {version}')
        print('    ',end='')
        print(metadata['Description'])
    else:
        print(f'error: target not found: {name}')

def install_packages(packages):
    non_aur_package_str = ''
    api_str = f'https://aur.archlinux.org/rpc/?v=5&type=info'

    for package in packages:
        api_str += f'&arg[]={package}'

    metadata = requests.get(api_str).json()
    result_count = metadata['resultcount']

    aur_packages = {}
    for package in metadata['results']:
        aur_packages[package['Name']] = package

    if result_count != len(packages):
        for package in packages:
            if package not in aur_packages:
                non_aur_package_str += package + ' '

        retc = os.system(f'sudo pacman --color auto -S {non_aur_package_str}')
        if retc != 0:
            print('error installing non-AUR packages.')

    if aur_packages == {}:
        return
    print('')
    for pkgname in aur_packages:
        pkgdata = aur_packages[pkgname]
        for key in pkgdata:
            data = pkgdata[key]
            print(f'{key}: {data}')

        print('')

        name = pkgdata['Name']

        if pkgdata['OutOfDate'] not in [None, 'null']:
            prompt = input(f'warning: package {name} is out of date. Continue? [y/N] ')
            if x.lower() != 'y':
                continue # skip current package

        package_path = f'{cache_path}/{name}/'
        clone_success = os.system(f'git clone https://aur.archlinux.org/{name}.git {package_path}')

        if (clone_success and os.path.exists(package_path)):
            cleanbuild = input(f'files already exist for package {name}. Rebuild package? [y/N] ')
            if cleanbuild.lower().strip() == 'y':
                os.system(f'rm -rf {package_path}')
                result_ = os.system(f'git clone https://aur.archlinux.org/{name}.git {package_path}')
                if result_:
                    print(f'error: error installing package {name}')
                    continue

        retc = os.system(f'cd {package_path} && pwd && makepkg -si {package_path}/')

        if retc != 0:
            print('warning: non-zero return code from package build.')

<<<<<<< HEAD
=======
def check_cache_size():
    try:
        cache_size = 0

        for dirpath, dirnames, filenames in os.walk(cache_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                # skip if it is symbolic link
                if not os.path.islink(fp):
                    cache_size += os.path.getsize(fp)

        cache_size_mb = round(cache_size // 1024 // 1024)

        if cache_size_mb >= 1000:
            if normal_term: 
                print(f'{RED}WARNING{ENDC}: Cache size is greater than 1GB (current size of {cache_size_mb}MB)')
            else:
                print(f'WARNING: Cache size is greater than 1GB (current size of {cache_size_mb}MB)')
            print('Consider running "aurinstall clean" to clean the cache, or deleting some files in the cache directory.')
            print(f'Cache is located at: {cache_path}')

    except:
        print('error: error checking cache size.')
>>>>>>> 708d33dcba5cb0cc7c7d55e4e77a693ca5413e54


def clean():
    packages_in_cache = os.listdir(cache_path)
    if len(packages_in_cache) == 0:
        print('no packages in cache.')
        return


    package_dict = {}

    for i, pkg in enumerate(packages_in_cache):
        print(f'{i+1}. {pkg}')
        package_dict[i+1] = pkg

    x = input(f'select package caches to clean (leave blank for all, -1 for none): ')
    if x.strip() == '':
        for pkg in packages_in_cache:
            r = os.system(f'rm -rf {cache_path}/{pkg}/')
            if r != 0:
                print(f'error cleaning cache of package {pkg}')
            else:
                print(f'cleaned cache: {cache_path}/{pkg}')
    elif x.strip() == '-1':
        return

    else:
        for ind in x.strip().split(' '):
            try:
                pkg = package_dict[int(ind)]
                r = os.system(f'rm -rf {cache_path}/{pkg}/')
                if r != 0:
                    print(f'error cleaning cache of package {pkg}')

                else:
                    print(f'cleaned cache {cache_path}/{pkg}')
            except:
                print(f'invalid package index: {ind}')

def update_script():
    print('cloning aurinstall from github to ensure latest version...')
    os.system(f'rm -rf {cache_path}/aurinstall/')
    clone_failed = os.system(f'git clone --quiet https://github.com/hasanqz/aurinstall {cache_path}/aurinstall/ >> /dev/null')
    if clone_failed:
        print('error: error cloning new aurinstall version')
        return

    os.system(f'sudo cp {cache_path}/aurinstall/aurinstall /usr/bin/aurinstall && sudo chmod +x /usr/bin/aurinstall')
    print('updated to latest aurinstall version.')


def update():
    print('updating standard packages...')
    os.system('sudo pacman --color auto -Syu')    
    print('\nchecking AUR packages for updates...')
    aur_pkgs = [pkg for pkg in subprocess.getoutput('pacman -Qm').split('\n')]

    api_str = f'https://aur.archlinux.org/rpc/?v=5&type=info'
    pkgs = {}

    to_update = []

    pkg_list = subprocess.getoutput('pacman -Qm').split('\n')
    for pkg in pkg_list:
        pkg_name, pkg_ver = pkg.split(' ', 1)
        api_str += f'&arg[]={pkg_name}'
        pkgs[pkg_name] = pkg_ver

    metadata = requests.get(api_str).json()
    if metadata['resultcount'] <= 0:
        if aur_pkgs == []:
            return
        else:
            for pkg in aur_pkgs:
                print(f'package {pkg} is invalid or not an AUR package.')
            return
    
    for result in metadata['results']:
        name = result['Name']
        ver = result['Version']
        ood = result['OutOfDate']

        if pkgs[name] != ver:
            os.system(f'rm -rf {cache_path}/{name}')
            to_update.append(name)

    if to_update != []:
        install_packages(to_update)
    else:
        print('no AUR packages to update!')

def remove_packages(packages):
    pstr = ''.join([i + ' ' for i in packages])
    os.system(f'sudo pacman -R {pstr}')

def all_list_in_str(str_, lst):
    y = True
    for i in lst:
        if i not in str_:
            y = False

    return y
        

def search_package(terms):
    pstr = ''.join([i + ' ' for i in terms])
    rc = os.system(f'pacman --color auto -Ss {pstr}')

    api_str = f'https://aur.archlinux.org/rpc/?v=5&type=search&arg={terms[0]}'

    json = requests.get(api_str).json()

    if json['resultcount'] == 0 and rc:
        print('error: no packages found.')
        return
    
    rw_package_data = json['results']
    package_data = {}
    for i in rw_package_data:
        package_data[i['Name']] = i

    packages_to_show = []

    for rsp in package_data:
        dt = package_data[rsp]
        name = dt['Name']
        desc = dt['Description']

        if all_list_in_str(f'{name} {desc}', terms[1:]):
            packages_to_show.append(dt)

    for i in packages_to_show:
        print_package_info(i)
    


help_ = """                  _           _        _ _ 
  __ _ _   _ _ __(_)_ __  ___| |_ __ _| | |
 / _` | | | | '__| | '_ \/ __| __/ _` | | |
| (_| | |_| | |  | | | | \__ \ || (_| | | |
 \__,_|\__,_|_|  |_|_| |_|___/\__\__,_|_|_|

Simple AUR helper written in Python.

Valid operations are install, search, update, clean, and remove.

 - install multiple packages with one command
 - specify more than one search term to refine your search 

- written by Hasan Zahra
https://github.com/HasanQZ/aurinstall"""

if __name__ == '__main__':
    argv = sys.argv
    argc = len(sys.argv)

    if argc == 1:
        print(help_)
        exit()
    
    if argc == 2:
        if argv[1] not in ['install', 'search', 'remove', 'update', 'clean']:
            print(f'Invalid operation: {argv[1]}')
        elif argv[1] == 'update':
            update()
            update_script()
        elif argv[1] == 'clean':
            clean()
        else:
            print(f'Please provide an argument for operation: {argv[1]}')

    elif argc >= 3:
        if argv[1] == 'clean':
            clean()
        if argv[1] == 'install':
            install_packages(argv[2:])                

        elif argv[1] == 'search':
            search_package(argv[2:])

        elif argv[1] == 'remove':
            remove_packages(argv[2:])
    else:
        print(f'invalid arguments: {argv}')
